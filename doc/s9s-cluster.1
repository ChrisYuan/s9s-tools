.TH S9S-CLUSTER 1 "August 29, 2016"

.SH NAME
s9s-cluster \- Command line client for the Severalnines Clustercontrol server.
.SH SYNOPSIS
.B s9s-cluster
.RI [OPTION]...
.SH DESCRIPTION
\fBs9s\fP  is a command line tool for ClusterControl, which can be used to
deploy and operate MySQL, MariaDB, MongoDB and PostgreSQL.

.SH OPTIONS
.SS "Main Option"
The application should always be started using a main option that sets what
operation should be performed. This "main option" should be one of the
following:

.TP
.B \-L, \-\-list
List the clusters managed by the controller.

.TP
.B \-\-stat
Print the details of one or more clusters.

.TP
.B \-\-create
Create a new cluster. When this command line option is provided the program
will contact the controller and register a new job that will eventually create
a new cluster. 

.TP
.B \-\-create-account
Create a new account to be used on the cluster to access the database(s).

.TP
.B \-\-create-report
When this command line option is provided a new job will be started that will
create a report. After the job is executed the report will be available on the 
controller. If the \fB\-\-output-dir\fP command line option is provided the
report will be created in the given directory on the controller host.

.TP
.B \-\-add\-node
Adds a new node (server) to the cluster or to be more precise creates a new
job that will eventually add a new node to the cluster. The name (or IP 
address) of the node should be specified using the \fB\-\-nodes\fR command 
line option.

.TP
.B \-\-remove\-node 
Removes a node from the cluster (creates a new job that will remove the node
from the cluster). The name (or IP address) of the node should be specified 
using the \fB\-\-nodes\fR command line option.

.TP
.B \-\-rolling-restart
Restart all nodes of the cluster by keeping the cluster alive. This command 
line option will create a job that will restart all the nodes.

.TP
.B \-\-stop
Creates and registers and a new job that will stop the cluster when executed.

.TP
.B \-\-start
Creates a new job to start the cluster.

.TP
.B \-\-drop
Removes the cluster from the Cmon controller. The cluster remains operational,
but the controller will no longer manage or monitor it.

.TP
.B \-\-delete-account
Delete an existing account from the cluster.


.SS General Options

.TP
.B \-\-help
Print the help message and exist.

.TP
.B \-\-debug
Print even the debug level messages.

.TP
.B \-v, \-\-verbose
Print more messages than normally.

.TP
.B \-V, \-\-version
Print version information and exit.

.TP
.BR \-c " [\fIPROT\fP://]\fIHOSTNAME\fP[:\fIPORT\fP]" "\fR,\fP \-\^\-controller=" [\fIPROT\fP://]\\fIHOSTNAME\fP[:\fIPORT\fP]
The host name of the Cmon Controller. The protocol and port is also accepted as
part of the hostname (e.g. --controller="https://127.0.0.1:9556").

.TP
.BI \-P " PORT" "\fR,\fP \-\^\-controller-port=" PORT
The port where the Cmon Controller is waiting for connections.

.TP
.BI \-u " USERNAME" "\fR,\fP \-\^\-cmon\-user=" USERNAME
The name of the user that is going to be used to authenticate on the Cmon
Controller. This can also be set as the \fBcmon_user\fP configuration file 
value, but the command line option of course has precedence over the
configuration file. 

.TP
.BI \-t " STRING" "\fR,\fP \-\^\-rpc-token=" STRING
The RPC token to be used when authenticating on the Cmon Controller.

.TP
.B \-l, \-\-long
This option is similar to the -l option for the standard ls UNIX utility
program. If the program creates a list of objects this option will change its
format to show more details.

.TP
.B \-\-print-json
The JSON strings will be printed while communicating with the controller. This 
option is for debugging purposes.

.TP
.BR \-\^\-color [ =\fIWHEN\fP "]
Turn on and off the syntax highlighting of the output. The supported values for 
.I WHEN
is
.BR never ", " always ", or " auto .

.TP
.B \-\-batch
Print no messages. If the application created a job print only the job ID number
and exit. If the command prints data do not use syntax highlight, headers,
totals, only the pure table to be processed using filters.

.TP
.B \-\-no\-header
Do not print headers for tables.

.TP
.BI \-\^\-output-dir= DIRECTORY
The directory where the output file(s) will be created.

.\"
.\"
.\"
.SS Job Related Options

.TP
.B \-\-wait
If the application created a job (e.g. to create a new cluster) and this command
line option is provided it will wait until the job is executed. While waiting a
progress bar will be shown unless the silent mode is set.

.TP
.B \-\-log
If the application created a job (e.g. to create a new cluster) and this command
line option is provided it will wait until the job is executed. While waiting
the job logs will be shown unless the silent mode is set.

.TP
.BI \-\^\-schedule= DATETIME
The job will not be executed now but it is scheduled to execute later. The
datetime string is sent to the backend, so all the formats are supported that is
supported by the controller.

.\"
.\"
.\"
.SS Cluster Related Options

.TP
.BI \-i " INTEGER" "\fR,\fP \-\^\-cluster-id=" INTEGER
If the operation related to an existing cluster this option can be used to
control which cluster will be manipulated. If the operation creates a new
cluster the cluster ID is assigned automatically, so this option can't be used.

.TP
.BI \-n " NAME" "\fR,\fP \-\^\-cluster-name=" NAME
Sets the cluster name. If the operation creates a new cluster this will be the
name of the new cluster. (Usage of this option for selecting an existing cluster
is not yet implemented.)

.TP
.BI \-\^\-nodes= NODELIST
The list of nodes or hosts enumerated in a special string using a semicolon as
field separator (e.g. "192.168.1.1;192.168.1.2"). 
The strings in the node list are urls that can have the following protocols:

.\" 
.\" Here is how we make a 7 character deep left indent from the .RS to the .RE
.\" formatters. This is by the way the list of the supported protocols.
.\" 
.RS 7
.TP
.B mysql:// 
The protocol for MySql servers. Use this string to specify MySql servers.
.TP
.B ndbd://
Someone has to write this part.
.TP
.B ndb_mgmd://
Someone has to write this part. The mgmd:// notation is also accepted.
.TP
.B haproxy://
Used to create and manipulate HaProxy servers.
.TP
.B proxysql://
Use this to install and handle ProxySql servers.
.TP
.B maxscale://
The protocol to install and handle MaxScale servers.
.RE

.TP
.BI \-\^\-vendor= VENDOR
The name of the vendor to be installed.

.TP
.BI \-\^\-provider-version= VERSION
The version string of the software to be installed. 

.TP
.BI \-\^\-os-user= USERNAME
The name of the remote user that is used to gain SSH access on the remote nodes.
If this command line option is omitted the name of the local user will be used
on the remote hosts too.

.TP
.BI \-\^\-cluster-type= TYPENAME
The name of the cluster type to be installed. Currently the following types are
supported: \fBgalera\fP, \fBmysqlreplication\fP, \fBgroupreplication\fP (or 
\fBgroup_replication\fP), \fBndb\fP (or \fBndbcluster\fP) and \fBpostgresql\fP.

.TP
.BR \-\^\-cluster\-format [ =\fIFORMATSTRING\fP "]
The string that controls the format of the printed information about clusters.
When this command line option is used the specified information will be printed
instead of the default columns. The format string uses the '%' character to mark
variable fields and flag characters as they are specified in the standard
printf() C library functions. The '%' specifiers are ended by field name letters
to refer to various properties of the clusters.

The "%+12I" format string for example has the "+12" flag characters in it with
the standard meaning: the field will be 12 character wide and the "+" or "-"
sign will always be printed with the number. 

The properties of the message are encoded by letters. The in the "%-5I" for
example the letter "I" encodes the "cluster ID" field, so the numerical ID of
the cluster will be substituted. 

Standard '\\' notation is also available, \\n for example encodes a new-line 
character.

The s9s-tools support the following fields:

.RS 7
.TP
.B a
The number of active alarms on the cluster.

.TP 
.B C
The configuration file for the cluster.

.TP
.B c
The total number of CPU cores in the cluster. Please note that this number may
be affected by hyper-threading. When a computer has 2 identical CPUs, with four
cores each and uses 2x hyperthreading it will count as 2x4x2 = 16.

.TP 
.B D
The domain name of the controller of the cluster. This is the string one would
get if executed the "domainname" command on the controller host.

.TP
.B f
The free disk bytes found on the monitored devices in the cluster.  This is a
double precision floating point number measured in Terabytes.

.TP
.B G
The name of the group owner of the cluster. 

.TP 
.B H
The host name of the controller of the cluster. This is the string one would get
if executed the "hostname" command on the controller host.

.TP
.B h
The number of the hosts in the cluster including the controller itself.

.TP
.B I
The numerical ID of the cluster.

.TP
.B i
The total number of monitored disk devices (partitions) in the cluster.

.TP
.B k
The total number of disk bytes found on the monitored devices in the cluster.
This is a double precision floating point number measured in Terabytes.

.TP 
.B L
The log file of the cluster.

.TP
.B M
A human readable short message that discribes the state of the cluster.

.TP
.B m
The size of memory of all the hosts in the cluster added together, measured in
GBytes. This value is represented by a double precision floating pointer number,
so formatting it with precision (e.g. "%6.2m") is possible.

.TP
.B N
The name of the cluster.

.TP
.B n
The total number of monitored network interfaces in the cluster.

.TP
.B O
The name of the owner of the cluster.

.TP
.B S
The state of the cluster.

.TP
.B T 
The type of the cluster.

.TP
.B t
The total network traffic (both received and transmitted) measured in
MBytes/seconds found in the cluster.

.TP
.B V
The vendor and the version of the main software (e.g. the SQL server) on the
node.

.TP
.B u
The CPU usage percent found on the cluster.

.TP
.B w
The total swap space found in the cluster measured in GigaBytes.

.TP
.B %
The '%' character itself. 

.RE

.\"
.\"
.\"
.TP
.BI \-\^\-db\-admin= USERNAME
The user name of the database administrator (e.g. 'root').

.TP
.BI \-\^\-db-admin-passwd= PASSWORD
The password of the datanase administrator. Passing the password through the
command line is a security risk, so I will add other ways to store the password
soon.

.TP
.BI \-\^\-account= USERNAME[:PASSWORD][@HOSTNAME]
The account to be used or created on the cluster. The command line option
argument may contain a username, a password for the user and a hostname
identifying the host from where the user may log in.

.TP
.BI \-\^\-with-database
Create a database for the new account while creating a new user account on the 
cluster. The name of the database will be the same as the name of the account
and all access rights will be granted for the account to use the database.

.TP
.BI \-\^\-privileges= EXPRESSION
Privileges to be granted to a user account on the server. The privileges are
specified using a simple language that is interpreted by the Cmon Controller. 
The language is specified as follows:

.nf
.RS
  expression: specification[;...] 
  
  specification: [object[,...]:]privilege[,...]
  
  object: {
      *
    | *.*
    | database_name.*
    | database_name.table_name
    | database_name
  }
.RE
.fi

.RS
Please note that an object name on itself is a database name (and not a table
name) and multiple objects can be enumerated by using the ',' as separator. It
is also important that multiple specifications can be enumerated using the
semicolon as separator.

The expression \fB"MyDb:INSERT,UPDATE;Other:SELECT"\fP for example defines
\fBINSERT\fP and \fBUPDATE\fP privileges on the \fBMyDb\fP database and
\fBSELECT\fP privilege on the \fBOther\fP database. The expression
\fB"INSERT,UPDATE"\fP on the other hand would specify \fBINSERT\fP and
\fBUPDATE\fP privileges on all databases and all tables.

.\"
.\"
.\"
.SH CLUSTER LIST
Using the \fB\-\-list\fP and \fB\-\-long\fP command line options a detailed list
of the clusters can be printed. Here is an example of such a list:

.nf
# \fBs9s cluster --list --long\fP
ID STATE   TYPE        OWNER GROUP NAME     COMMENT
 1 STARTED replication pipas users mysqlrep All nodes are operational.
Total: 1

.fi

The list contains the following fields:
.RS 5
.TP
.B ID
The cluster ID of the given cluster.
.TP
.B STATE
A short string describing the state of the cluster. Possible values are 
MGMD_NO_CONTACT, STARTED, NOT_STARTED, DEGRADED, FAILURE, SHUTTING_DOWN,
RECOVERING, STARTING, UNKNOWN, STOPPED.
.TP
.B TYPE
The type of the cluster. Possible values are mysqlcluster, replication, 
galera, group_repl, mongodb, mysql_single, postgresql_single.
.TP
.B OWNER
The user name of the owner of the cluster.
.TP
.B GROUP
The group owner's name.
.TP
.B NAME 
The name of the cluster.
.TP
.B COMMENT
A short human readable description of the current state of the cluster.

.\"
.\"
.\"
.SH ENVIRONMENT
The s9s application will read and consider the following environment variables:
.TP 5 
CMON_CONTROLLER
The host name and optionally the port number of the controller that will be
contacted. This also can be set using the \fB\-\-controller\fR command line
option.

.TP 5
CMON_CLUSTER_ID
The numerical ID of the cluster to control, same as the \fB\-\-cluster\-id\fR
command line option.

.\" 
.\" The examples. The are very helpful for people just started to use the
.\" application.
.\" 
.SH EXAMPLES
.PP
Here is an example showing how to create a new cluster:

.nf
# \fBs9s cluster \\
    --create \\
    --controller=https://localhost:9556 \\
    --cluster-type=galera \\
    --vendor=percona \\
    --nodes="192.168.1.104;192.168.1.107;192.168.1.108" \\
    --provider-version=5.6 \\
    --wait\fR
.fi

This command will create a new job on the controller to create a new cluster.
Since the \fB--wait\fP command line option was provided it will wait until the
job is finished, but the command line tool can be aborted before the job is
finished, the job remains there and will be executed by the controller anyway.
It is also possible to attach to the job using the job ID later or use the --log
option to print the messages of the job.

A similar example that wioll create a MySQL replication cluster with multiple
master and slave nodes in it:

.nf
# \fBs9s cluster \\
    --create \\
    --cluster-type=mysqlreplication \\
    --nodes=192.168.1.117?master;192.168.1.113?slave;192.168.1.115?slave;192.168.1.116?master;192.168.1.118?slave;192.168.1.119?slave; \\
    --vendor=percona \\
    --cluster-name=ft_replication_23986 \\
    --provider-version=5.6 \\
    --log\fR
.fi

Another example simply lists the clusters managed by the controller:

.nf
# \fBs9s cluster \\
    --list \\
    --long \\
    --controller=https://localhost:9556 \\
    --color=always\fR
.fi

Schedule a rolling restart of the cluster 20 minutes from now:

.nf
# \fBs9s cluster \\
    --rolling-restart \\
    --cluster-id=1 \\
    --schedule="$(date -d 'now + 20 min')"\fR
.fi

Create a database account on the cluster and also create a new database to be
used by the new user. Grant all access on the new database for the new user:

.nf
# \fBs9s cluster \\
    --create-account \\
    --cluster-id=1 \\
    --account=john:passwd@10.10.1.100 \\
    --with-database\fR
.fi

The following example shows how the cluster format string can be used to print
a customized the cluster list. The \fB\-\-cluster\-format\fR command line option
is used here to produce a multi-line output:

.nf
# \fBs9s cluster --list --cluster-format="    ID : %05I \\nStatus : %S \\n  Name : %N\\n  Type : %T\\n Owner : %O/%G\\n"\fR
    ID : 00001 
Status : STOPPED 
  Name : ft_postgresqlstop_48273
  Type : POSTGRESQL_SINGLE
 Owner : pipas/users
.fi
