#-*- mode: shell-script;-*-

#
# echo 1 if the command line option is a longopt with '='.
#
function elementExists()
{
    opts_with_equal=(\
        --config-file \
        --controller --controller-port \
        --color \
        --cluster-id --cluster-name --nodes \
        --properties \
        --vendor --provider-version --os-user \
        --cluster-type --db-admin --db-admin-passwd \
        --account --db-name \
        )

    for i in ${opts_with_equal[@]}; do
        if [ "${opts_with_equal[$i]}" == "$1" ]; then
            echo 1
            break
        fi
    done

    return 0
}

#
# $*. The options to find.
#
# Returns true if the current command line option list has one option of the
# presented options.
#
function _s9s_has_options()
{
    local option

    for (( i=0; i < COMP_CWORD; i++ )); do
        for option in $*; do
            if [[ ${COMP_WORDS[i]} == "$option" ]]; then
                return 0
            fi
        done
    done
    
    return 1
}

#
# Returns true if the COMMAND part of the command line options is not yet
# entered.
#
function _s9s_no_command()
{
    if ! _s9s_has_options "backup" "cluster" "job" "maint" "node" "process" \
        "user" "script" "metatype"; 
    then
        return 0
    fi

    return 1
}

function _s9s() 
{
    local main_opt
    local cur prev opts

    COMPREPLY=()

    cur="${COMP_WORDS[COMP_CWORD]}"
    prev="${COMP_WORDS[COMP_CWORD-1]}"
    if [[ "$prev" == "=" ]]; then
        prev="${COMP_WORDS[COMP_CWORD - 2]}"
    fi
 
    #opts="--help --verbose --version "
    #opts+=" node cluster"

    # 
    # Offering the commands if they are not entered.
    #
    if _s9s_no_command; then
        opts+="backup cluster job maint node process user script metatype"
        COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
        return 0
    fi

    for (( i=0; i < COMP_CWORD; i++ )); do
        if [[ ${COMP_WORDS[i]} == "backup" ]]; then
            main_opt+="--help "
            main_opt+="--create --delete --list --restore "

            if ! _s9s_has_options $main_opt; then
                opts=$main_opt
            elif [ "$prev" == "--cluster-id" ]; then
                prev="${cur%%=*}="
                cur=${cur#*=}
                opts=$(s9s cluster --list -l --batch --cluster-format="%I ")
            else
                opts+="--help --verbose --version --config-file= --controller= "
                opts+="--controller-port= --long --print-json --color= --batch "
                opts+="--no-header --only-ascii --wait --log --schedule= "
                opts+="--cluster-id= --cluster-name= --nodes= "

                opts+="--backup-id= "
                opts+="--backup-directory= --backup-method= --databases= "
                opts+="--full-path= --no-compression --on-node "
                opts+="--parallellism= --use-pigz "
            fi
            
            COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
            return 0
        elif [[ ${COMP_WORDS[i]} == "cluster" ]]; then
            main_opt+="--help "
            main_opt+="--add-node --create-account --create --create-database "
            main_opt+="--delete-account --drop --list --ping --remove-node "
            main_opt+="--rolling-restart --start --stat --stop "
            main_opt+="--create-report "

            if ! _s9s_has_options $main_opt; then
                opts="$main_opt "
            elif [ "$prev" == "--cluster-id" ]; then
                prev="${cur%%=*}="
                cur=${cur#*=}
                opts=$(s9s cluster --list -l --batch --cluster-format="%I ")
            elif [ "$prev" == "--cluster-name" ]; then
                prev="${cur%%=*}="
                cur=${cur#*=}
                opts=$(s9s cluster --list)
            elif [ "$prev" == "--color" ]; then
                prev="${cur%%=*}="
                cur=${cur#*=}
                opts="never always auto"
            else 
                opts=$(s9s cluster --list)
                opts+="--help --verbose --version " 
                opts+="--config-file= "
                opts+="--controller= --controller-port= "
                opts+="--rpc-tls "
                opts+="--long --print-json --color= --batch --no-header "
                opts+="--only-ascii "
                opts+="--wait --log --schedule= "
                opts+="--cluster-id= --cluster-name= --nodes= "
                opts+="--properties= "
                opts+="--vendor= --provider-version= --os-user= "
                opts+="--cluster-type= --db-admin= --db-admin-passwd= "
                opts+="--account= --with-database --db-name= "
                opts+="--output-dir= "
            fi 
        elif [[ ${COMP_WORDS[i]} == "job" ]]; then
            main_opt+="--help "
            main_opt+="--wait --log --list "

            if ! _s9s_has_options $main_opt; then
                opts=$main_opt
            elif [ "$prev" == "--cmon-user" ]; then
                prev="${cur%%=*}="
                cur=${cur#*=}
                opts=$(s9s user --list)
            elif [ "$prev" == "--cluster-id" ]; then
                prev="${cur%%=*}="
                cur=${cur#*=}
                opts=$(s9s cluster --list -l --batch --cluster-format="%I ")
            else
                opts+="--help --verbose --version --config-file= --controller= "
                opts+="--controller-port= --long --print-json --color= --batch "
                opts+="--no-header --only-ascii --wait --log --schedule= "
                opts+="--cluster-id= --cluster-name= --nodes= --cmon-user= "
           
                opts+="--date-format= "
                opts+="--job-id= --from= --until= "
            fi
        elif [[ ${COMP_WORDS[i]} == "maint" ]]; then
            main_opt="--help "
            main_opt="--list --create --delete "

            if ! _s9s_has_options $main_opt; then
                opts=$main_opt
            elif [ "$prev" == "--cluster-id" ]; then
                prev="${cur%%=*}="
                cur=${cur#*=}
                opts=$(s9s cluster --list -l --batch --cluster-format="%I ")
            elif [ "$prev" == "--cmon-user" ]; then
                prev="${cur%%=*}="
                cur=${cur#*=}
                opts=$(s9s user --list)
            else
                opts+="--help --verbose --version --config-file= --controller= "
                opts+="--controller-port= --long --print-json --color= --batch "
                opts+="--no-header --only-ascii --wait --log --schedule= "
                opts+="--cluster-id= --cluster-name= --nodes= "

                opts+="--date-format= end= --full-uuid --reason= --start= "
                opts+="--cmon-user= --uuid="
            fi
        elif [[ ${COMP_WORDS[i]} == "node" ]]; then
            main_opt+="--help "
            main_opt+="--change-config --list-config --list --pull-config "
            main_opt+="--push-config --set --stat "

            if ! _s9s_has_options $main_opt; then
                opts=$main_opt
            elif [ "$prev" == "--graph" ]; then
                prev="${cur%%=*}="
                cur=${cur#*=}
                opts+="cpughz cpuload cputemp cpusysload "
                opts+="diskfree diskreadspeed diskreadwritespeed "
                opts+="diskwritespeed diskutilization "
                opts+="memfree memutil "
                opts+="netreceivedspeed netsentspeed netspeed "
                opts+="netreceiveerrors nettransmiterrors neterrors "
                opts+="sqlcommands sqlstatements sqlconnections "
                opts+="sqlreplicationlag "
                opts+="swapfree "
            elif [ "$prev" == "--cluster-id" ]; then
                prev="${cur%%=*}="
                cur=${cur#*=}
                opts=$(s9s cluster --list -l --batch --cluster-format="%I ")
            else
                opts+="--help --verbose --version --config-file= --controller= "
                opts+="--controller-port= --long --print-json --color= --batch "
                opts+="--no-header --only-ascii --wait --log --schedule= "
                opts+="--cluster-id= --cluster-name= --nodes= --cmon-user= "

                opts+="--properties= --begin --end --force --graph= "
                opts+="--node-format= --opt-group= --opt-name= --opt-value= "
                opts+="--output-dir= --properties="
            fi
        elif [[ ${COMP_WORDS[i]} == "script" ]]; then
            main_opt+="--help "
            main_opt+="--tree --execute "

            if ! _s9s_has_options $main_opt; then
                opts=$main_opt
            elif [ "$prev" == "--cmon-user" ]; then
                prev="${cur%%=*}="
                cur=${cur#*=}
                opts=$(s9s user --list)
            elif [ "$prev" == "--cluster-id" ]; then
                prev="${cur%%=*}="
                cur=${cur#*=}
                opts=$(s9s cluster --list -l --batch --cluster-format="%I ")
            else
                opts+="--help --verbose --version --config-file= --controller= "
                opts+="--controller-port= --long --print-json --color= --batch "
                opts+="--no-header --only-ascii --wait --log --schedule= "
                opts+="--cluster-id= --cluster-name= --nodes= "
                
                opts+=$(compgen -f  -- "${COMP_WORDS[${COMP_CWORD}]}" )
            fi
        elif [[ ${COMP_WORDS[i]} == "process" ]]; then
            main_opt="--list --top --help"

            if ! _s9s_has_options $main_opt; then
                opts=$main_opt
            fi
        elif [[ ${COMP_WORDS[i]} == "user" ]]; then
            main_opt="--list --whoami --create --help"

            if ! _s9s_has_options $main_opt; then
                opts=$main_opt
            elif [ "$prev" == "--cmon-user" ]; then
                prev="${cur%%=*}="
                cur=${cur#*=}
                opts=$(s9s user --list)
            else
                opts+="--help --verbose --version " 
                opts+="--config-file= "
                opts+="--controller= --controller-port= "
                opts+="--rpc-tls "
                opts+="--long --print-json --color= --batch --no-header "
                opts+="--only-ascii "
                opts+="--wait --log --schedule= "
                opts+="--cluster-id= --cluster-name= --nodes= "
                opts+="--properties= "
                opts+="--vendor= --provider-version= --os-user= "
                opts+="--cluster-type= --db-admin= --db-admin-passwd= "
                opts+="--account= --with-database --db-name= "

                opts+="--cmon-user="
                opts+=$(s9s user --list)
            fi
        elif [[ ${COMP_WORDS[i]} == "metatype" ]]; then
            main_opt+="--help "
            main_opt+="--list --list-properties "
            
            if ! _s9s_has_options $main_opt; then
                opts=$main_opt
            elif [ "$prev" == "--cmon-user" ]; then
                prev="${cur%%=*}="
                cur=${cur#*=}
                opts=$(s9s user --list)
            elif [ "$prev" == "--type" ]; then
                prev="${cur%%=*}="
                cur=${cur#*=}
                opts=$(s9s metatype --list)
            else
                opts+="--help --verbose --version --config-file= --controller= "
                opts+="--controller-port= --long --print-json --color= --batch "
                opts+="--no-header --only-ascii --wait --log --schedule= "
                opts+="--cluster-id= --cluster-name= --nodes= "

                opts+="--type= "
            fi
        fi
    done
 
            isEqualOptions=$(elementExists "${cur}")
            if [ "${isEqualOptions:-0}" -eq 1 ]; then
                COMPREPLY=( $(compgen -W "${opts}" -S '=' -- "${cur}") )
            else
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            fi

            return 0
}
complete -o nospace -F _s9s s9s
