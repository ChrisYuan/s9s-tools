#! /bin/bash

MYNAME=$(basename $0)
MYDIR=$(dirname $0)
MYDIR=$(readlink -m $MYDIR)
VERSION="0.0.5"
VERBOSE=""
LOGFILE="$HOME/pip-cmon-test.log"
EXITCODE=0

GIT_HASH=""
GIT_AUTHOR=""
GIT_SUBJECT=""
START_EPOCH_TIME="$(date +%s)"

NO_GIT_PULL=""
OPTION_NO_COMPILE=""
OPTION_OS=""
DO_CLEAN=""

SHUT_DOWN_AFTER=""
SHUT_DOWN_AFTER_OPTION=""

OPTION_TEST_NAME="ft_install"
OPTION_VENDOR=""
OPTION_VERSION=""
OPTION_PID=""

S9S_OPTION=""

SERVER=""
SSH="ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -o LogLevel=quiet"

# This should come from config.
TEST_REPORT_URL="www:/var/www/html/ft_install/"
#TEST_REPORT_URL="jenkins@52.58.107.236:/var/www/tests"

source $MYDIR/utilityfunctions.sh

function printHelpAndExit()
{
cat <<EOF

Usage:
  $MYNAME [OPTION]...

  $MYNAME - Runs Cmon tests on multiple servers.

  -h, --help              Print this help and exit.
  -v, --version           Print version information and exit.
  --verbose               Print more messages.
  --log-file=FILE         Store all the messages in the given file too.
  --server=SERVER         The server or the servers where the tests will run.
  --blades                Set the servers to my blades.
  --pid                   Print the PID of the test script if it is running.
  
  --no-git-pull           Do not execute 'git pull' before the test.
  --no-compile            Do not compile the source, use as it is.
  --shut-down-after       Shut down the test server after the test.

  --s9s                   Test the s9s project.
  --test=NAME             The name of the test to run.
  --unit-tests            Run all the unit tests.

  --sqlversion=VERSION    The version to test.
  --vendor=VENDOR         The vendor name to test.
  --os=LIST               The name of the OS to test.

EXAMPLE:
  $MYNAME --server=blade01 --os=debian8 --vendor=mariadb --sqlversion=5.6

  $MYNAME --server=host01,host02 --os=debian7,debian8 --vendor=mariadb,percona,codership --sqlversion="5.6,5.7"
  
  $MYNAME --server=host01,host02 --os=debian7,debian8 --vendor=postgresql --sqlversion="5.6"


EOF

  exit 0
}

ARGS=$(\
    getopt \
        -o hvj: \
        -l "help,verbose,version,log-file:,server:,blades,pid,\
test:,unit-tests,os:,vendor:,sqlversion:,s9s,\
no-git-pull,no-compile,shut-down-after" \
        -- "$@")

if [ $? -ne 0 ]; then
    exit 6
fi

eval set -- "$ARGS"
while true; do
    case "$1" in
        -h|--help)
            shift
            printHelpAndExit
            ;;

        --verbose)
            shift
            VERBOSE="true"
            ;;

        -v|--version)
            shift
            printVersionAndExit
            ;;

        --log-file)
            shift
            LOGFILE=$(readlink -m "$1")
            shift
            ;;

        --server)
            shift
            SERVER="$1"
            SERVER=$(echo $SERVER | tr ',' ' ' | tr ';' ' ')
            shift
            ;;

        --blades)
            shift
            if [ -f "$HOME/.pip/blades" ]; then
                SERVER=$(cat "$HOME/.pip/blades" | tr ',' ' ')
            else
                SERVER="blade01 blade02 blade03 blade04 blade05 "
                SERVER+="blade06 blade07 blade08 blade09 blade10"
                echo "$SERVER" >"$HOME/.pip/blades"
            fi
            ;;

        --pid)
            shift
            OPTION_PID="true"
            ;;

        --s9s)
            shift
            S9S_OPTION="--s9s"
            ;;

        --test)
            shift
            OPTION_TEST_NAME="$1"
            TEST_NAME_OPTION="--test=$OPTION_TEST_NAME"
            shift
            ;;

        --unit-tests)
            shift
            OPTION_TEST_NAME="ut_cmonaccount ut_cmonacl ut_cmonbackup "
            OPTION_TEST_NAME+="ut_cmonbackupdb ut_cmonbackupretention "
            OPTION_TEST_NAME+="ut_cmonbinaryrecord ut_cmoncell "
            OPTION_TEST_NAME+="ut_cmonclusterconfig ut_cmoncommandhandler "
            OPTION_TEST_NAME+="ut_cmonconfigfile ut_cmonconfigproperties "
            OPTION_TEST_NAME+="ut_cmonconfiguration ut_cmoncpustatcollector "
            OPTION_TEST_NAME+="ut_cmoncpustats ut_cmoncron "
            OPTION_TEST_NAME+="ut_cmondatabasestats ut_cmondb "
            OPTION_TEST_NAME+="ut_cmondiskstats ut_cmondocument "
            OPTION_TEST_NAME+="ut_cmonencryption ut_cmoneventloop "
            OPTION_TEST_NAME+="ut_cmonfile ut_cmonhost "
            OPTION_TEST_NAME+="ut_cmonimperative ut_cmonjob "
            OPTION_TEST_NAME+="ut_cmonjsonmessage ut_cmonlocalprocess "
            OPTION_TEST_NAME+="ut_cmonlogger ut_cmonlogmessage "
            OPTION_TEST_NAME+="ut_cmonmail ut_cmonmailqueue "
            OPTION_TEST_NAME+="ut_cmonmemorystatcollector ut_cmonmemorystats "
            OPTION_TEST_NAME+="ut_cmonmetatype ut_cmonmongocluster "
            OPTION_TEST_NAME+="ut_cmonmysqlcollector ut_cmonmysqlslowlogparser "
            OPTION_TEST_NAME+="ut_cmonnetworkstatcollector ut_cmonnetworkstats "
            OPTION_TEST_NAME+="ut_cmonobject ut_cmonpkgversion "
            OPTION_TEST_NAME+="ut_cmonpluginexecutor ut_cmonprocesscollector "
            OPTION_TEST_NAME+="ut_cmonprocessmanager "
            OPTION_TEST_NAME+="ut_cmonprocessstatcollector "
            OPTION_TEST_NAME+="ut_cmonregexp ut_cmonrpcservice "
            OPTION_TEST_NAME+="ut_cmonscriptmanager ut_cmonscripts "
            OPTION_TEST_NAME+="ut_cmonsheet ut_cmonspreadsheetmanager "
            OPTION_TEST_NAME+="ut_cmonsqlstats ut_cmonsslca "
            OPTION_TEST_NAME+="ut_cmonstatistics ut_cmonstring "
            OPTION_TEST_NAME+="ut_cmonthread ut_cmontimer "
            OPTION_TEST_NAME+="ut_cmonuser ut_cmonvariant "
            OPTION_TEST_NAME+="ut_cmonwatchdog ut_communication "
            OPTION_TEST_NAME+="ut_communicationstubbed ut_connect "
            OPTION_TEST_NAME+="ut_galera ut_galerastubbed "
            OPTION_TEST_NAME+="ut_haproxy ut_helpers ut_joblogger "
            OPTION_TEST_NAME+="ut_memcache ut_mongostats "
            OPTION_TEST_NAME+="ut_mysqladvisor ut_mysqlsinglecluster "
            OPTION_TEST_NAME+="ut_osversion ut_postgresqlsinglecluster "
            OPTION_TEST_NAME+="ut_postinst ut_proxysql "
            OPTION_TEST_NAME+="ut_replication ut_repositorymanager "
            OPTION_TEST_NAME+="ut_resourcestatcollector ut_s9scluster "
            OPTION_TEST_NAME+="ut_simplealarm ut_ssh "
            OPTION_TEST_NAME+="ut_tcpstatcollector ut_tcpstats "
            OPTION_TEST_NAME+="ut_workflow "
            ;;

        --os)
            shift
            OPTION_OS="$1"

            if [ "$OPTION_OS" == "all" ]; then
                OPTION_OS="centos70,centos66,centos64,centos63,centos56,"
                OPTION_OS+="debian6,debian7,debian8,"
                OPTION_OS+="ubuntu1204,ubuntu1404,ubuntu1604"
            fi

            shift
            ;;

        --vendor)
            shift
            OPTION_VENDOR="$1"

            if [ "$OPTION_VENDOR" == "all" ]; then
                OPTION_VENDOR=""
                OPTION_VENDOR+="mysqlcluster_oracle "
                OPTION_VENDOR+="mysql_replication_percona "
                OPTION_VENDOR+="10gen "
                OPTION_VENDOR+="percona "
                OPTION_VENDOR+="mariadb "
                OPTION_VENDOR+="codership "
                OPTION_VENDOR+="postgresql"
            fi

            shift
            ;;
            
        --sqlversion)
            shift
            OPTION_VERSION="$1"
            shift
            ;;

        --no-git-pull)
            shift
            NO_GIT_PULL="true"
            NO_GIT_PULL_OPTION="--no-git-pull"
            ;;

        --no-compile)
            shift
            OPTION_NO_COMPILE="true"
            NO_COMPILE_OPTION="--no-compile"
            ;;

        --shut-down-after)
            shift
            SHUT_DOWN_AFTER="true"
            SHUT_DOWN_AFTER_OPTION="--shut-down-after"
            ;;

        --)
            shift
            break
            ;;

        *)
            printError "Unhandled option $1"
            exit 1
            ;;
    esac
done

export PATH="$HOME/bin:$PATH"

#
# Prints a message and also sends it to the server so it is made available as
# status string.
#
function message()
{
    echo "$1"

    pip-host-control --status="$1"
}

function test_name_to_test()
{
    if [ "$OPTION_TEST_NAME" ]; then
        echo "$OPTION_TEST_NAME"
        return 0
    fi

    echo "ft_install"
}

#
# This function prints the version that will be tested.
#
function version_to_test()
{
    local host_name=$(hostname)
   
    #
    # Command line overrules everything.
    #
    if [ "$OPTION_VERSION" ]; then
        echo "$OPTION_VERSION" | tr ',' ' '
        return 0
    fi

    #
    # Depends on hostname.
    #
    case $host_name in
        host08)
            echo "5.5"
            return 0
            ;;

        *)
            echo "5.6"
            return 0
            ;;
    esac
    
    echo "5.6"
}

#
# Prints the name of the vendor to test.
#
function vendor_to_test()
{
    local host_name=$(hostname)

    #
    # Command line overrules everything.
    #
    if [ "$OPTION_VENDOR" ]; then
        echo "$OPTION_VENDOR" | tr ',' ' ' | tr ';' ' '
        return 0
    fi

    #
    # This is a very primitive way, it is just a temporary measure.
    #
    case $host_name in
        host01)
            echo "mysqlcluster_oracle"
            ;;
        
        host02)
            echo "mysql_replication_percona"
            ;;
        
        host03)
            echo "10gen"
            ;;
        
        host04)
            echo "percona"
            ;;
        
        host05)
            echo "mariadb"
            ;;
        
        host06)
            echo "codership"
            ;;
        
        host07)
            echo "postgresql"
            ;;
        
        #host08)
        *)
            echo "percona"
            ;;
    esac
}

#
# Prints one or more operatig system name that should be tested.
#
function os_to_test()
{
    local host_name=$(hostname)
   
    #
    # Command line option overrules everything.
    #
    if [ "$OPTION_OS" ]; then
        echo $OPTION_OS | tr ',' ' '
        return 1;
    fi

    if [ "$OPTION_VENDOR" ]; then
        case $host_name in
            host01)
                echo "centos70"
                ;;
        
            host02)
                echo "centos66"
                ;;
        
            host03)
                echo "centos64"
                ;;
        
            host04)
                echo "debian8"
                ;;
        
            host05)
                echo "debian7"
                ;;
        
            host06)
                echo "ubuntu1204"
                ;;
        
            host07)
                echo "ubuntu1404"
                ;;
            
            host08)
                echo "centos63"
                ;;
        
            *)
                echo "centos66"
                ;;
        esac

        return 0
    fi

    echo "centos66"
}

#
# Prints the directory name where the source can be found.
#
function find_clustercontrol_source_directory()
{
    local dir_path
    
    dir_path="$HOME/clustercontrol-enterprise"
    if [ -d "$dir_path" ]; then
        echo "$dir_path"
        return 0
    fi

    dir_path="$HOME/Desktop/stuff/work/clustercontrol-enterprise"
    if [ -d "$dir_path" ]; then
        echo "$dir_path"
        return 0
    fi
    
    #
    # Well, we did not find it, but we did not find any others either.
    #
    printError "Coult not find clustercontrol source."
    pip-host-control --error "Coult not find clustercontrol source."
    echo "$HOME/clustercontrol-enterprise"
}

function find_s9s_source_directory()
{
    local dir_path
    
    dir_path="$HOME/s9s-tools"
    if [ -d "$dir_path" ]; then
        echo "$dir_path"
        return 0
    fi

    dir_path="$HOME/Desktop/stuff/work/s9s-tools"
    if [ -d "$dir_path" ]; then
        echo "$dir_path"
        return 0
    fi
    
    #
    # Well, we did not find it, but we did not find any others either.
    #
    printError "Could not find clustercontrol source."
    pip-host-control --error "Coult not find clustercontrol source."
    echo "$HOME/s9s-tools"
}

#
# FIXME: This will be more complicated.
# FIXME: This expects to be in the source directory.
#
function prepare_source()
{
    if [ -z "$NO_GIT_PULL" ]; then
        pip-host-control --log "Pulling source."
        git pull >/dev/null 2>/dev/null
        pip-host-control --log "Pulled source."
    fi

    if [ "$DO_CLEAN" ]; then
        pip-host-control --log "Cleaning source dir."
        git clean -dfx >/dev/null 2>/dev/null
        pip-host-control --log "Cleaned source."
    fi
}

function find_mysql()
{
    for dir in /opt/mysql-cluster-gpl-7*; do
        if [ -d "$dir" ]; then
            echo "$dir"
            return 0
        fi
    done

    return 1
}

#
# This is the function that finds the clustercontrol-enterprise directory and
# compiles it.
#
function compile_clustercontrol_source()
{
    local retcode
    local source_root=$(find_clustercontrol_source_directory)
    local mysql_dir=$(find_mysql)
   
    #
    # Finding the source and entering the directory.
    #
    if [ ! -d "$source_root" ]; then
        pip-host-control --error "Could not find clustercontrol source."
        return 1
    fi

    pip-host-control --log "Entering directory '$source_root'..."
    pushd "$source_root" >/dev/null 2>/dev/null
    retcode="$?"

    if [ "$retcode" -ne 0 ]; then
        pip-host-control --error "Could not chdir to '$source_root'."
        return 1
    fi

    #
    # Not gonna compile the source when the --no-compile command line option is
    # provided.
    #
    if [ "$OPTION_NO_COMPILE" ]; then
        popd >/dev/null 2>/dev/null
        return 0
    fi
   
    ####
    # Preparing to compile.
    #
    if [ "$mysql_dir" ]; then
        export PATH="$mysql_dir/bin:$PATH"
    fi

    pip-host-control --testing --log "Compiling."
    #pip-host-control --log " PATH: $PATH"
    #pip-host-control --log " mysqlshow: $(which mysqlshow)"
    #pip-host-control --log " pwd: '$PWD'"

    #
    # Running autogen in the source root. 
    #
    pip-host-control --log "Running 'autogen.sh'."
    rm -f autogen.log

    ./autogen.sh >>"autogen.log" 2>>"autogen.log"
    retcode $?
    if [ $retcode -ne 0 ]; then
        pip-host-control \
            --tail "$PWD/autogen.log" \
            --error "The ./autogen.sh returned an error ($retcode)."
        exit 6
    fi

    #
    # Running make in source root.
    #
    pip-host-control --log "Running 'make'."
    rm -f "make.log"

    make -j10 >>"make.log" 2>>"make.log"
    retcode=$?
    if [ "$retcode" -ne 0 ]; then
        pip-host-control \
            --tail "$PWD/make.log" \
            --error "The make -j10 returned an error ($retcode)."
        exit 6
    fi

    cd tests

    #
    # Running autogen.sh in the tests directory.
    #
    pip-host-control --log "Running 'autogen.sh' in tests."
    rm -f autogen.log

    ./autogen.sh >>"autogen.log" 2>>"autogen.log"
    retcode=$?
    if [ $retcode -ne 0 ]; then
        pip-host-control \
            --tail "$PWD/autogen.log" \
            --error "The ./autogen.sh in tests returned an error ($retcode)"
        exit 6
    fi

    # 
    # Running make in tests directory.
    #
    pip-host-control --log "Running 'make' in tests."
    rm -f "make.log"

    make -j10 >>"make.log" 2>>"make.log"
    retcode=$?
    if [ "$retcode" -ne 0 ]; then
        pip-host-control \
            --tail "$PWD/make.log" \
            --error "The make -j10 returned an error ($retcode)."
        exit 6
    fi
        
    pip-host-control --log "Finished compiling source."
}

function compile_s9s_source()
{
    local source_root=$(find_s9s_source_directory)

    #
    # Finding the source and entering the directory.
    #
    if [ ! -d "$source_root" ]; then
        pip-host-control --error "Could not find clustercontrol source."
        return 1
    fi

    pip-host-control --log "Entering directory '$source_root'..."
    pushd "$source_root" >/dev/null 2>/dev/null
    retcode="$?"

    if [ "$retcode" -ne 0 ]; then
        pip-host-control --error "Could not chdir to '$source_root'."
        return 1
    fi
    
    prepare_source

    #
    # Not gonna compile the source when the --no-compile command line option is
    # provided.
    #
    if [ "$OPTION_NO_COMPILE" ]; then
        popd >/dev/null 2>/dev/null
        return 0
    fi
    
    #
    # Running autogen in the source root. 
    #
    pip-host-control --log "Running 'autogen.sh'."
    rm -f autogen.log

    ./autogen.sh >>"autogen.log" 2>>"autogen.log"
    retcode $?
    if [ $retcode -ne 0 ]; then
        pip-host-control \
            --tail "$PWD/autogen.log" \
            --error "The ./autogen.sh returned an error ($retcode)."
        exit 6
    fi
    
    #
    # Running make in source root.
    #
    pip-host-control --log "Running 'make'."
    rm -f "make.log"

    make -j10 >>"make.log" 2>>"make.log"
    retcode=$?
    if [ "$retcode" -ne 0 ]; then
        pip-host-control \
            --tail "$PWD/make.log" \
            --error "The make -j10 returned an error ($retcode)."
        exit 6
    fi

    pip-host-control --log "Running 'make install'."
    sudo make install >>"make.log" 2>>"make.log"

    return 1
}

function compile_source()
{
    local retcode

    compile_clustercontrol_source

    retcode=$?
    if [ "$retcode" -ne 0 ]; then
        return "$retcode"
    fi

    if [ "$S9S_OPTION" ]; then
        compile_s9s_source
        retcode="$?"
    fi

    return "$retcode"
}

#
# $1: test name
#
# The report is a HTML file where we put the report about the test run.
#
function report_file_name()
{
    local test_name=$1
    echo "${USER}-$(hostname)-${test_name}-${GIT_HASH}.html"
}

#
# $1: test name
#
function result_file_name()
{
    local test_name=$1
    echo "${USER}-$(hostname)-${test_name}-${GIT_HASH}.result"
}

function log_file_name()
{
    local test_name=$1
    echo "${USER}-$(hostname)-${test_name}-${GIT_HASH}.log"
}

#
# $1: test name
# $2: the state, "FAILURE", "RUNNING" or "SUCCESS"
# $3: file with the test program output
#
function upload_report_file_ascii()
{
    local report_file=$(report_file_name "$1")
    local tmp_file="/var/tmp/$report_file"

    cat <<EOF >>$tmp_file
    <html>
      <h1>Test results for '$1'</h1>
      <p>This test created no report. Try to check the programs output for
      details. The web interface shows the output when clicked on the test's
      name.</p>
    </html>
EOF

    scp "$tmp_file" "$TEST_REPORT_URL"
    rm -f "$tmp_file"
}

#
# $1: test name
# $2: the state, "FAILURE", "RUNNING" or "SUCCESS"
# $3: file with the test program output
#
function upload_result_file()
{
    local test_name
    local test_state
    local result_file
    local tmp_file
    
    test_name="$1"
    test_state="$2"
    result_file=$(result_file_name "$test_name")
    tmp_file="/var/tmp/$result_file"

    upload_report_file_ascii  "$test_name"  "$test_state" "$3"
    generate_test_result_info "$test_name" "$test_state" >$tmp_file

    scp "$tmp_file" "$TEST_REPORT_URL"

    message "Running '$1'"

    rm -f "$tmp_file"
}

function elapsedTimeString()
{
    local start_date="$1"
    local end_date="$(date +%s)"
    local T=$((end_date-start_date))

    printf "%02d:%02d:%02d" \
        "$((T/3600%24))" "$((T/60%60))" "$((T%60))"
}

#
# $1: test name
# $2: the state, "FAILURE", "RUNNING" or "SUCCESS"
#
function generate_test_result_info()
{
    local git_commit_date=$(git show -s --format=%ci $GIT_HASH)
    local git_has_local_changes="no"
    local elapsed_time
    local is_unit_test="true"
    local test_name
    local test_state

    while true; do
        case "$1" in 
            --unit-test)
                shift
                is_unit_test="true"
                ;;

            --functional-test)
                shift
                is_unit_test="false"
                ;;

            *)
                break
        esac
    done

    test_name="$1"
    test_state="$2"
    git_commit_date=$(git show -s --format=%ci $GIT_HASH)
    git_has_local_changes="no"

    if ! git diff-index --quiet HEAD --; then 
        git_has_local_changes="yes"
    fi

    elapsed_time="$(date +%s)"
    let elapsed_time-="$START_EPOCH_TIME"

    cat <<EOF
test_server="$(hostname)"
testname="$test_name"
githash="$GIT_HASH"
gitcommitdate="$git_commit_date"
githaslocalchanges="$git_has_local_changes"
state="$test_state"
report_file="$(report_file_name $test_name)"
user="$USER"
elapsed_time="$elapsed_time"
elapsed_time_string="$(elapsedTimeString $START_EPOCH_TIME)"
test_start_epoch="$START_EPOCH_TIME"
is_unit_test="$is_unit_test"
EOF

  if [ "$S9S_OPTION" ]; then
      echo "project=\"s9s-tools\""
  else
      echo "project=\"clustercontrol-enterprise\""
  fi
}

#
# $1: the test name
# $2: the single os name to test
# $3: the single version to test
#
function run_test()
{
    local test_name="$1"
    local os="$2"
    local version="$3"
    local vendor="$(vendor_to_test)"
    local test_dir
    local return_code
    local tmp_file
    local logfile

    logfile=$(log_file_name "$test_name")
    if [ "$S9S_OPTION" ]; then
        test_dir=$(find_s9s_source_directory)
    else
        test_dir=$(find_clustercontrol_source_directory)
    fi

    if [ ! -d "$test_dir" ]; then
        pip-host-control --error "Directory '$test_dir' does not exist."
        return 1
    else
        pip-host-control --log "Entering '$test_dir'..."
        pushd "$test_dir"
    fi
    
    #
    # Notifying the user about a test is starting.
    #
    echo "----8<----8<----8<----8<----8<----8<----"
    message "Running '$test_name'."

    #
    # Running the actual test.
    #
    case "$test_name" in 
        ft_*.sh)
            cd tests

            pushd "$(find_clustercontrol_source_directory)/tests"
            
            #
            # Cleaning up before.
            #
            killall ft_full
            sleep 3
            killall -9 ft_full
            rm -rvf /tmp/cmon_*

            echo "STARTING..." >ft_full.log

            ./ft_full/ft_full >>ft_full.log 2>>ft_full.log &
            popd

            upload_result_file "$test_name" "RUNNING" $logfile
            pip-host-control --log "Running '$test_name'."
            ./$test_name \
                --print-commands \
                --reset-config \
                --server=$(hostname) \
                >>"$logfile" 2>>"$logfile"

            return_code=$?

            pip-host-control --log "Finished ${test_name} ($return_code)."
           
            #
            # Cleaning up after.
            #
            killall ft_full
            sleep 3
            killall -9 ft_full
            rm -rvf /tmp/cmon_*
            
            if [ $return_code -eq 0 ]; then
                upload_result_file "$test_name" "SUCCESS" $logfile
            else
                upload_result_file "$test_name" "FAILURE" $logfile
            fi
            ;;

        ft_*)
            if [ -f "Vagrantfile" ]; then
                vagrant destroy -f
                rm -f "Vagrantfile"
            fi

            rm -f test_ssh_key.pub*

            pip-host-control --log "Running ${test_name}."
                
            if [ ! -f "$test_name/$test_name" ]; then
                pip-host-control \
                    --error "Program $test_name was not found." \
                    --status "Program $test_name was not found."
                    
                return 1
            fi

            ./$test_name/$test_name \
                --template=headless \
                --vendor=$(vendor_to_test) \
                --mysql-version=$version \
                --os="$os" >>"$logfile" 2>>"$logfile"

            return_code=$?

            pip-host-control --log "Finished ${test_name} ($return_code)."
            ;;

        ut_*)
            #
            # This is under development.
            #
            upload_result_file "$test_name" "RUNNING" $logfile

            #
            # Running the test.
            #
            pip-host-control --log "Running ${test_name}."
            printVerbose "$test_name/$test_name >>$logfile 2>>$logfile"

            if [ ! -f "$test_name/$test_name" ]; then
                pip-host-control \
                    --error "Program $test_name was not found." \
                    --status "Program $test_name was not found."
                
                return 1
            fi

            $test_name/$test_name --color >>$logfile 2>>$logfile
            return_code=$?

            pip-host-control --log "Finished ${test_name} ($return_code)."
            if [ $return_code -eq 0 ]; then
                upload_result_file "$test_name" "SUCCESS" $logfile
            else
                upload_result_file "$test_name" "FAILURE" $logfile
            fi
    esac
   
    #
    # Uploading the output of the test program as log file.
    #
    if [ -f "$logfile" ]; then
        printVerbose "scp \"$logfile\" \"$TEST_REPORT_URL\""
        scp "$logfile" "$TEST_REPORT_URL"
        rm -f "$logfile"
    fi
            
    message "Finished running '$test_name' ($return_code)."
}

#
# $1: os
# $2: test name
# $3: version
#
function main()
{
    local os="$1"
    local name="$2"
    local version="$3"
    local source_root

    pip-host-control --testing --log "--------------------------------------"
    pip-host-control --testing --log "Preparing test."
    message "Preparing test..."

    #
    # Finding the source root.
    #
    source_root=$(find_clustercontrol_source_directory)
    if [ ! -d "$source_root" ]; then
        printError "Directory '$source_root' does not exist."
        exit 6
    fi

    #
    # If the user removes this file we cancel the shutdown request, otherwise we
    # will shut down the server at the end of the test.
    #
    if [ "$SHUT_DOWN_AFTER" ]; then
        if [ -z "$DRY" ]; then
            touch ~/cmontest_will_shut_down
        fi
    fi

    #
    # Preparing the source, generating a file holding the test results.
    #
    pushd "$source_root"

    prepare_source
    GIT_HASH=$(git log -n 1 --pretty=format:"%H")
    GIT_AUTHOR=$(git log -n 1 --pretty=format:"%aE")
    GIT_SUBJECT=$(git log -n 1 --pretty=format:"%s")
    
    popd 

    echo "----8<----8<----8<----8<----8<----8<----"
    generate_test_result_info "$OPTION_TEST_NAME" "RUNNING"
    echo "----8<----8<----8<----8<----8<----8<----"

    compile_source

    #
    # Running the test.
    #
    pip-host-control --log "Entering '$source_root/tests'..."
    pushd "$source_root/tests" >/dev/null 2>/dev/null
    
    for os in $os; do 
        for version in $version; do
            for test_name in $name; do
                run_test "$test_name" "$os" "$version"
            done
        done
    done
    
    popd >/dev/null 2>/dev/null

    pip-host-control \
        --idle \
        --log    "Finished with tests, idle." \
        --status "Idle"

    #
    # If the "shutdown after the test" is requested and the user did not delete
    # the shutdown file we will now shut down the computer.
    #
    if [ "$SHUT_DOWN_AFTER" -a -f ~/cmontest_will_shut_down ]; then
        rm -f ~/cmontest_will_shut_down
        pip-host-control --shutdown
    fi
}

#
# $1: the server name
#
function is_server_running_ssh()
{
    local serverName="$1"
    local isOK

    isOk=$(ssh -o ConnectTimeout=3 -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -o LogLevel=quiet "$serverName" 2>/dev/null -- echo OK)
    if [ "$isOk" == "OK" ]; then
        return 0
    fi

    return 1
}

function find_idle_server()
{
    for server in $SERVER; do
        lock_file=$(lockFile)

        if ! is_server_running_ssh "$server"; then
            printVerbose "Server '$server' is off-line."
            continue
        fi

        other_pid=$( \
            ssh -o UserKnownHostsFile=/dev/null \
                -o StrictHostKeyChecking=no \
                -o LogLevel=quiet \
                "$server" -- pip-cmon-test --pid)

        printVerbose "server     : '$server'"
        printVerbose "lock_file  : '$lock_file'"
        printVerbose "other_pid  : '$other_pid'"
        if [ "$other_pid" ]; then
            continue
        fi

        echo "$server"
        break
    done
}

function wait_for_idle_server()
{
    local idle_server

    while true; do
        idle_server=$(find_idle_server)
  
        # Finding a server that is idle and ready to execute a test.
        if [ "$idle_server" ]; then
            echo "$idle_server"
            return 0
        fi

        sleep 3
    done
}

function run_tests_remote()
{
    local os
    local version
    local vendor
    local idle_server
    local test_name
    local no_git_pull_option
    local no_compile_option
    declare -A already_compiled

    for os in $(os_to_test); do 
        for version in $(version_to_test); do
            for vendor in $(vendor_to_test); do
                for test_name in $(echo "$OPTION_TEST_NAME" | tr ',' ' '); do
                    idle_server=$(wait_for_idle_server)
                    no_git_pull_option="$NO_GIT_PULL_OPTION"
                    no_compile_option="$NO_COMPILE_OPTION"

                    if [ "${already_compiled[$idle_server]}" ]; then
                        no_git_pull_option="--no-git-pull"
                        no_compile_option="--no-compile"
                    fi

                    echo "-------------------------------------"
                    echo -e "idle_server : $(STR_GREEN "$idle_server")"
                    echo -e "test        : '$test_name'"
                    echo -e "compiled    : '${already_compiled[$idle_server]}'"

                    pip-host-control --log "Starting test on '$idle_server'."
                    ssh -o UserKnownHostsFile=/dev/null \
                        -o StrictHostKeyChecking=no \
                        -o LogLevel=quiet \
                        $idle_server -- nohup pip-cmon-test \
                            $no_git_pull_option \
                            $no_compile_option \
                            $S9S_OPTION \
                            --os=$os \
                            --vendor=$vendor \
                            --sqlversion=$version \
                            --test="$test_name" \
                            >/dev/null 2>/dev/null &

                    already_compiled[$idle_server]="yes"
                    sleep 2
                done
            done
        done
    done
}


if [ "$OPTION_PID" ]; then
    lock_file=$(lockFile)
    if [ -f "$lock_file" ]; then
        pid=$(cat "$lock_file")
        if [[ -e /proc/${pid} ]]; then
            echo "$pid"
            exit 0
        fi

        rm -f "$lock_file"
        exit 0
    fi

    exit 1
fi

#
#
#
if [ "$SERVER" ]; then
    pip-host-control --testing --log="--------------------------------------"
    pip-host-control --testing --log="Running tests..."
    pip-host-control --status "Testing..."

    run_tests_remote
    waitForProcessesToEnd 
    pip-host-control --idle --status="Idle"
else
    checkOtherInstances
    echo "checkOtherInstances : $?"

    main \
        "$(os_to_test)" "$(test_name_to_test)" "$(version_to_test)"
fi


