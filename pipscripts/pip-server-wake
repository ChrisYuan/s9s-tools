#! /bin/bash
MYNAME=$(basename $0)
MYDIR=$(dirname $0)
MYDIR=$(readlink -m "$MYDIR")
VERSION="0.0.4"
VERBOSE="$HOME/.pip.log/${MYNAME}.log"
LOGFILE=""

#
# $*: the error message
#
#
# Prints an error message to the standard error. The text will not mixed up with
# the data that is printed to the standard output.
#
function printError()
{
    local datestring=$(date "+%Y-%m-%d %H:%M:%S")

    echo -e "$MYNAME($$) $*" >&2

    if [ "$LOGFILE" ]; then
        echo -e "$datestring ERROR $MYNAME($$) $*" >>"$LOGFILE"
    fi
}

#
# $*: the message
#
# Prints all the arguments but only if the program is in the verbose mode.
#
function printVerbose()
{
    local datestring=$(date "+%Y-%m-%d %H:%M:%S")

    if [ "$VERBOSE" == "true" ]; then
        echo -e "$MYNAME($$) $*" >&2
    fi

    if [ "$LOGFILE" ]; then
        echo -e "$datestring DEBUG $MYNAME($$) $*" >>"$LOGFILE"
    fi
}

function printHelpAndExit()
{
cat <<EOF
Usage:
  $MYNAME [OPTION]... [SERVER_NAME]...

  $MYNAME - Powers on remote servers if they are known servers.

 -h, --help           Print this help and exit.
 -v, --version        Print version information and exit.
 --verbose            Print more messages.
 --log-file=FILE      Store all the messages in the given file too.
 --wait               Wait until the woke server is accepting SSH connections.
 --status             No change, just check if the sshd is running.

EOF
    exit 0
}

ARGS=$(\
    getopt \
        -o hvs:c:l \
        -l "help,verbose,version,log-file:,wait,status" \
        -- "$@")

if [ $? -ne 0 ]; then
    exit 6
fi

eval set -- "$ARGS"
while true; do
    case "$1" in
        -h|--help)
            shift
            printHelpAndExit
            ;;

        --verbose)
            shift
            VERBOSE="true"
            ;;

        -v|--version)
            shift
            printVersionAndExit
            ;;

        --log-file)
            shift
            LOGFILE=$(readlink -m "$1")
            shift
            ;;

        --wait)
            shift
            WAIT="true"
            ;;

        --status)
            shift
            OPTION_STATUS="true"
            ;;
            
        --)
            shift
            break
            ;;

        *)
            ;;
    esac
done


#
# $1: the server name
#
function is_server_running_ssh()
{
    local serverName="$1"
    local isOK

    isOk=$(ssh -o ConnectTimeout=1 "$serverName" 2>/dev/null -- echo OK)
    if [ "$isOk" == "OK" ]; then
        return 0
    fi

    return 1
}

#
# $2: the server name
#
# Waits until the server is accepting SSH connections. There is also a timeout
# implemented here.
#
function wait_for_server_ssh()
{
    local serverName="$1"
    local nTry=0

    while true; do
        if is_server_running_ssh "$serverName"; then
            echo "Server '$serverName' is started."
            return 0
        fi

        # 60 x 10 = 10 minutes
        if [ "$nTry" -gt 60 ]; then
            printError "Server '$serverName' did not came alive."
            return 1
        fi

        sleep 10
        let nTry+=1
    done

    return 0
}

#
# $1: the server name
#
# This function finds the MAC address for a given host. The MAC addresses should
# be stored in '~/.pip/servers.mac' like this:
#
# server1;00:1a:a0:03:b3:b5
# server2;00:1d:09:15:17:8a
# storage01;00:1d:09:24:59:33
#
# Very primitive format, I did not want to spend much time developing it. 
#
function mac_for_server()
{
    local serverName="$1"
    local line
    local field1
    local field2

    for line in $(cat ~/.pip/servers.mac); do
        line=$(echo "$line" | tr ';' ' ' | tr ',' ' ')
        field1=$(echo "$line" | cut -d' ' -f1)
        field2=$(echo "$line" | cut -d' ' -f2)

        if [ "$field1" == "$serverName" ]; then
            echo "$field2"
            return 0
        fi
    done
}

#
# $1: the name of the server
#
function wake_server ()
{
    local hostName="$1"
    local macAddress

    if [ -z "$hostName" ]; then
        return 1
    fi

    if is_server_running_ssh "$hostName"; then
        printVerbose "Server '$hostName' is already running."
        return 0
    fi

    macAddress=$(mac_for_server "$hostName")
    if [ -z "$macAddress" ]; then
        printError "MAC address for $hostName was not found."
        return 1
    fi

    printVerbose "Waking server ${hostName} on ${macAddress}."
    wakeonlan "$macAddress"
    return 0
}

if [ -z "$OPTION_STATUS" ]; then
    #
    # Wake up the servers.
    #
    nthserver=0
    for hostname in $*; do 
        # Not proper: we should know when the last actual wake happened.
        if [ "$nthserver" -gt 0 ]; then
            printVerbose "Waiting a while before waking the next server."
            sleep 5
        fi

        wake_server "$hostname"
        let nthserver+=1
    done

    retcode=0
    if [ "$WAIT" ]; then
        for hostname in $*; do 
            wait_for_server_ssh "$hostname"
            if [ $? -gt 0 ]; then
                retcode=1
            fi
        done
    fi
else
    #
    # No change, just check the status
    #
    is_server_running_ssh $*
    retcode="$?"

    printVerbose "Exiting with '$retcode' on '$*'."
fi
    
exit $retcode
