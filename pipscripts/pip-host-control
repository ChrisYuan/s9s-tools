#! /bin/bash
MYNAME=$(basename $0)
MYDIR=$(dirname $0)
MYDIR=$(readlink -m "$MYDIR")
VERSION="0.0.17"
VERBOSE=""
LOGFILE=""

STATUS_TEXT=""
SHUTDOWN=""
HOST_INFO_FILE="$HOME/.piphostinfo"
HOST_STATUS_FILE="$HOME/.piphostinfo.status"
HOST_LOG_FILE="$HOME/.piphostinfo.log"
CSV_OUTPUT=""

# This should come from config.
TEST_REPORT_URL="www:/var/www/html/ft_install/"
#TEST_REPORT_URL="jenkins@52.58.107.236:/var/www/tests"


source $MYDIR/utilityfunctions.sh

#
# Prints the help text and exits.
#
function printHelpAndExit()
{
cat <<EOF
Usage:
  $MYNAME [OPTION]...

  $MYNAME - Controls test server and uploads server status file. 

 -h, --help         Print this help and exit.
 -v, --version      Print version information and exit.
 --verbose          Print more messages.
 --log-file=FILE    Store all the messages in the given file too.

 --status=TEXT      Set a human readable string as status.
 --log=TEXT         Append a log message to the host log.
 --shutdown         This will actually shut down the host. Be careful!
 --csv-output=FILE  Save the CSV output into the given file.


EOF
    exit 0
}

ARGS=$(\
    getopt \
        -o hv \
        -l "help,verbose,version,log-file:,status:,shutdown,csv-output:" \
        -- "$@")

if [ $? -ne 0 ]; then
    exit 6
fi

eval set -- "$ARGS"
while true; do
    case "$1" in
        -h|--help)
            shift
            printHelpAndExit
            ;;

        --verbose)
            shift
            VERBOSE="true"
            ;;

        -v|--version)
            shift
            printVersionAndExit
            ;;

        --log-file)
            shift
            LOGFILE=$(readlink -m "$1")
            shift
            ;;
        
        --status)
            shift
            STATUS_TEXT=$1
            shift
            ;;

        --shutdown)
            shift
            SHUTDOWN="true"
            STATUS_TEXT="Shut down."
            ;;

        --csv-output)
            shift
            CSV_OUTPUT="$1"
            shift
            ;;

        --)
            shift
            break
            ;;

        *)
            ;;
    esac
done

function append_log_message()
{
    local log_message="$*"
    local date_string="$(date "+%Y-%m-%d %H:%M:%S")"

    echo "$date_string INFO    $log_message" >>"$HOST_LOG_FILE"
    #echo "$date_string WARNING $log_message" >>"$HOST_LOG_FILE"
    #echo "$date_string ERROR   $log_message" >>"$HOST_LOG_FILE"
}

#
# Prints the memory size in gigabytes.
#
function get_memory_size()
{
    local number=$(free | awk '/^Mem:/{print $2}')
    let number/=1000
    let number/=1000

    echo $number
}

function get_disk_size()
{
    local number=$(df $HOME | tail -n1 | awk '{print $2}')
    let number/=1000
    let number/=1000

    echo $number
}

function get_status_text()
{
    if [ -f "$HOST_STATUS_FILE" ]; then
        cat "$HOST_STATUS_FILE" | tr -d '\n'
    fi
}

#
# Collects the information about this host and prints it into the standard
# output. 
#
function collect_host_info()
{
    cat <<EOF
HOSTNAME="$(hostname)"
NUMBER_OF_CORES=$(nproc)
MEMORY_GIGABYTES=$(get_memory_size)
DISK_GIGABYTES=$(get_disk_size)
STATUS_TEXT="$(get_status_text)"
EOF
}

function upload_file()
{
    local source_file="$1"
    local target_file="$2"
    local temp_file
    local retcode

    printVerbose "Uploading file"
    printVerbose "  source : '$source_file'"
    printVerbose "  target : '$target_file' "

    if [ ! -f "$source_file" ]; then
        printError "File '$source_file' not found."
        return 1
    fi

    temp_file=$(mktemp)
    scp \
        -o 'StrictHostKeyChecking no' \
        "$source_file" "$target_file" \
        >>"$temp_file" 2>>"$temp_file"
    
    retcode=$?
    if [ "$retcode" != "0" ]; then
        cat "$temp_file"
    fi

    return $retcode
}

#
# Storing the host status so that next time we can have the same without the
# same command line option.
#
if [ "$STATUS_TEXT" ]; then
    echo "$STATUS_TEXT" >"$HOST_STATUS_FILE"
fi

if [ ! -f "$HOST_LOG_FILE" ]; then
    append_log_message "Starting log file."
fi

#
# Collecting some information about the host and storing in a file.
#
collect_host_info >"$HOST_INFO_FILE"
if [ "$VERBOSE" ]; then
    cat "$HOST_INFO_FILE"
fi

upload_file "$HOST_INFO_FILE" "$TEST_REPORT_URL/$(hostname).hostinfo"
upload_file "$HOST_LOG_FILE"  "$TEST_REPORT_URL/$(hostname).hostlog"

if [ "$CSV_OUTPUT" ]; then
    upload_file "$CSV_OUTPUT" "$TEST_REPORT_URL/test_matrix.csv" ""
fi

if [ "$SHUTDOWN" == "true" ]; then
    if [ $(hostname) != "lpere-home" ]; then
        sudo poweroff
    fi
fi

