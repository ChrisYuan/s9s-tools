#! /bin/bash
MYNAME=$(basename $0)
MYDIR=$(dirname $0)
MYDIR=$(readlink -m "$MYDIR")
VERSION="0.0.1"
VERBOSE=""
LOGFILE=""
SERVER="192.168.1.104"

#
# Prints the software version and exits.
#
function printVersionAndExit()
{
    echo "$MYNAME Version $VERSION on $(hostname)" >&2
}

#
# $*: the error message
#
#
# Prints an error message to the standard error. The text will not mixed up with
# the data that is printed to the standard output.
#
function printError()
{
    local datestring=$(date "+%Y-%m-%d %H:%M:%S")

    echo -e "$MYNAME($$) $*" >&2

    if [ "$LOGFILE" ]; then
        echo -e "$datestring ERROR $MYNAME($$) $*" >>"$LOGFILE"
    fi
}

#
# $*: the message
#
# Prints all the arguments but only if the program is in the verbose mode.
#
function printVerbose()
{
    local datestring=$(date "+%Y-%m-%d %H:%M:%S")

    if [ "$VERBOSE" == "true" ]; then
        echo -e "$MYNAME($$) $*" >&2
    fi

    if [ "$LOGFILE" ]; then
        echo -e "$datestring DEBUG $MYNAME($$) $*" >>"$LOGFILE"
    fi
}

function printHelpAndExit()
{
cat <<EOF
Usage:
  $MYNAME [OPTION]... [CONTAINER_NAME]...

  $MYNAME - Monitors various system properties and reports them.

 -h, --help           Print this help and exit.
 -v, --version        Print version information and exit.
 --verbose            Print more messages.
 --log-file=FILE      Store all the messages in the given file too.
 --server=SERVER      MQTT broker server.

EOF
    exit 0
}

ARGS=$(\
    getopt \
        -o hvs:c:l \
        -l "help,verbose,version,log-file:,server:" \
        -- "$@")

if [ $? -ne 0 ]; then
    exit 6
fi

eval set -- "$ARGS"
while true; do
    case "$1" in
        -h|--help)
            shift
            printHelpAndExit
            ;;

        --verbose)
            shift
            VERBOSE="true"
            VERBOSE_OPTION="--verbose"
            ;;

        -v|--version)
            shift
            VERSION_OPTION="--version"
            ;;

        --log-file)
            shift
            LOGFILE=$(readlink -m "$1")
            shift
            ;;

        --server)
            shift
            SERVER="$1"
            shift
            ;;

        --)
            shift
            break
            ;;

        *)
            ;;
    esac
done

function mqtt_config_file()
{
    local file_name="$HOME/.pip/mqtt.conf"

    if [ ! -f "$file_name" ]; then
        printVerbose "Creating '$file_name'."

        mkdir -p "$(dirname $file_name)" 2>/dev/null
cat <<EOF >$file_name
#
#
#
MQTT_SERVER="192.168.1.104"
MQTT_PORT=1883
EOF
    fi

    echo "$file_name"
}


CONFIG_FILE=$(mqtt_config_file)
if [ ! -f "$CONFIG_FILE" ]; then
    printError "Config file '$CONFIG_FILE' not found."
    exit 5
else
    printVerbose "Loading config file '$CONFIG_FILE'."
    source "$CONFIG_FILE"
fi

#
# Sends the load of the local computer to the mqtt broker.
#
function local_load_to_mqtt()
{
    local load
    local load_topic

    load=$(uptime | awk '{print $12}' | tr ',' '.')
    [ -z "$load" ] && load=$(uptime | awk '{print $11}' | tr ',' '.')
    [ -z "$load" ] && load=$(uptime | awk '{print $10}' | tr ',' '.')


    load_topic="server/$(hostname)/load"
    mosquitto_pub \
        --host $MQTT_SERVER \
        --port $MQTT_PORT \
        --topic $load_topic \
        --message "$load"
}

function local_free_disk_to_mqtt()
{
    local free
    local free_topic

    free=$(df /home | tail -n 1 | awk '{print $4}')
    free_topic="server/$(hostname)/free_disk"

    let free/=1024
    let free/=1024

    mosquitto_pub \
        --host $MQTT_SERVER \
        --port $MQTT_PORT \
        --topic $free_topic \
        --message "$free"
}


local_load_to_mqtt
local_free_disk_to_mqtt
