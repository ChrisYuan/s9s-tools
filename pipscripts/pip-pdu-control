#! /bin/bash

MYNAME=$(basename "$0")
MYDIR=$(dirname "$0")
MYDIR=$(readlink -m "$MYDIR")
VERSION="0.0.1"
VERBOSE=""
LOGFILE="$HOME/.pip/${MYNAME}.log"
OPTION_DEVICE=""
PDU_SERVER=""
PDU_OUTLETS="all"
PDU_OPERATION="on"

#
# Prints the software version and exits.
#
function printVersionAndExit()
{
    echo "$MYNAME Version $VERSION on $(hostname)" >&2
}

#
# $*: the error message
#
# Prints an error message to the standard error. The text will not mixed up with
# the data that is printed to the standard output.
#
function printError()
{
    local datestring=$(date "+%Y-%m-%d %H:%M:%S")

    echo -e "ERROR $*" >&2

    if [ "$LOGFILE" ]; then
        echo -e "$datestring ERROR $MYNAME($$) $*" >>"$LOGFILE"
    fi
}

#
# $*: the message
#
# Prints all the arguments but only if the program is in the verbose mode.
#
function printVerbose()
{
    local datestring=$(date "+%Y-%m-%d %H:%M:%S")

    if [ "$VERBOSE" == "true" ]; then
        echo -e "DEBUG $*" >&2
    fi

    if [ "$LOGFILE" ]; then
        echo -e "$datestring DEBUG $MYNAME($$) $*" >>"$LOGFILE"
    fi
}

function printHelpAndExit()
{
cat <<EOF
Usage:
  $MYNAME [OPTION]... DEVICE 

  $MYNAME - Turns on and off pdu outlets.

  -h, --help           Print this help and exit.
  -v, --version        Print version information and exit.
  --verbose            Print more messages.
  --log-file=FILE      Store all the messages in the given file too.
  --on                 Turn the socket on.
  --off                Turn the socket off.
  --state              Check the state of the socket.

EOF
    exit 0
}

ARGS=$(\
    getopt \
        -o hvs:c:l \
        -l "help,verbose,version,log-file:,on,off,state" \
        -- "$@")

if [ $? -ne 0 ]; then
    exit 6
fi

eval set -- "$ARGS"
while true; do
    case "$1" in
        -h|--help)
            shift
            printHelpAndExit
            ;;

        --verbose)
            shift
            VERBOSE="true"
            VERBOSE_OPTION="--verbose"
            ;;

        -v|--version)
            shift
            VERSION_OPTION="--version"
            ;;

        --log-file)
            shift
            LOGFILE=$(readlink -m "$1")
            shift
            ;;

        --on)
            shift
            PDU_OPERATION="on"
            ;;

        --off)
            shift
            PDU_OPERATION="off"
            ;;

        --state)
            shift
            PDU_OPERATION="state"
            ;;

        --)
            shift
            break
            ;;

        *)
            break
            ;;
    esac
done

OPTION_DEVICES="$@"

logger "Log file is: '$LOGFILE'."
touch "$LOGFILE"


LOGFILE="$HOME/.pip/${OPTION_DEVICES}.log"
if [ -z "$OPTION_DEVICES" ]; then
    printError "Device name is not provided."
    exit 1
fi

#
# $1: PDU server name
#
function create_pdu_config_file()
{
    local device="$1"
    local config_file="$HOME/.pip/$device"

    if [ -z "$device" ]; then
        printError "No server name while creating config file."
    fi

    if [ -f "$config_file" ]; then
        return 0
    fi

    cat >"$config_file" <<EOF
#
# PDU configuration file created by $MYNAME $VERSION
#
CONF_PDU_SERVER="$server"
CONF_PDU_MAC=""
CONF_PDU_STANDARD="apc"
CONF_PDU_FIRST_OUTLET="1"
CONF_PDU_LAST_OUTLET="24"
CONF_PDU_DELAY="0.1"
EOF
}

function switch_apc()
{
    #echo "***     PDU_OUTLETS : $PDU_OUTLETS"

    if [ "$PDU_OUTLETS" == "all" -a "$CONF_PDU_DELAY" != "0" ]; then
        for ((c=$CONF_PDU_FIRST_OUTLET;c<=$CONF_PDU_LAST_OUTLET;++c)); do
            pip-pdu-expect \
                "$CONF_PDU_SERVER" "$PDU_OPERATION" "$c" \
                >/dev/null 2>/dev/null

            sleep "$CONF_PDU_DELAY"
        done
    else
#        echo "pip-pdu-expect $CONF_PDU_SERVER $PDU_OPERATION $PDU_OUTLETS"

        pip-pdu-expect \
            "$CONF_PDU_SERVER" "$PDU_OPERATION" "$PDU_OUTLETS" \
            >/dev/null 2>/dev/null
    fi
}

function switch_orvibo()
{
    local retcode

    if [ -z "$CONF_PDU_MAC" ]; then
        printError "MAC address needed to switch Orvibo devices."
        return 1
    fi

    #
    # The S20control.py single script can be downloaded from git at
    # git@github.com:glenpp/OrviboS20.git
    #
    case "$PDU_OPERATION" in 
        on)
            S20control.py poweron $CONF_PDU_SERVER $CONF_PDU_MAC \
                2>/dev/null >/dev/null
            ;;

        off)
            S20control.py poweroff $CONF_PDU_SERVER $CONF_PDU_MAC \
                2>/dev/null >/dev/null
            ;;

        state)
            printVerbose "S20control.py getstate $CONF_PDU_SERVER $CONF_PDU_MAC"
            S20control.py getstate $CONF_PDU_SERVER $CONF_PDU_MAC \
                2>/dev/null >/dev/null
            
            retcode=$?
            printVerbose "retcode: $retcode"
            if [ "$retcode" -eq 0 ]; then
                echo "on"
            else
                echo "off"
            fi
            ;;

    esac
}

#
# pipas@t7500:~$ curl http://192.168.2.5/cm?cmnd=Status%2010 2>/dev/null | grep -o '"Temperature":[^,]\+' | awk -F: '{print $2}'
# 24.4
#
function switch_tasmota()
{
    local output
    local url="http://$CONF_PDU_SERVER/cm?cmnd="
    local logfile="$LOGFILE"

    if [ -z "$logfile" ]; then
        logfile="/dev/null"
    fi

    #
    #
    #
    case "$PDU_OPERATION" in 
        on)
            if [ -z "$CONF_PDU_OUTLET" ]; then
                curl ${url}Power%20on \
                    2>/dev/null >/dev/null
            else
                curl ${url}Power${CONF_PDU_OUTLET}%20on \
                    2>/dev/null >/dev/null
            fi
            ;;

        off)
            if [ -z "$CONF_PDU_OUTLET" ]; then            
                curl ${url}Power%20off \
                    2>/dev/null >/dev/null
            else
                curl ${url}Power${CONF_PDU_OUTLET}%20off \
                    2>/dev/null >/dev/null
            fi
            ;;

        state)
            printVerbose "Checking switch state."
            if [ -z "$CONF_PDU_OUTLET" ]; then
                output=$(curl \
                    ${url}Power%20status \
                    2>$logfile)
            else
                output=$(curl \
                    ${url}Power${CONF_PDU_OUTLET}%20status \
                    2>$logfile)
            fi

            printVerbose "output: $output"
            if echo "$output" | grep -q '"ON"'; then
                printVerbose "Result: 'on'"
                echo "on"
            else
                echo "off"
                printVerbose "Result: 'off'"
            fi
            ;;

    esac
}


for OPTION_DEVICE in $OPTION_DEVICES; do
    CONFIG_FILE_PATH="$HOME/.pip/${OPTION_DEVICE}.pdu"

    #create_pdu_config_file "$OPTION_DEVICE"
    if [ ! -f "$CONFIG_FILE_PATH" ]; then
        printError "Config file '$CONFIG_FILE_PATH' does not exist."
        continue
    fi

    #
    # Loading the config file.
    #
    CONF_PDU_OUTLET=""

    source "$CONFIG_FILE_PATH"

    #echo "*** CONF_PDU_OUTLET : $CONF_PDU_OUTLET"
    if [ "$CONF_PDU_OUTLET" ]; then
        PDU_OUTLETS="$CONF_PDU_OUTLET"
    fi
    
    #echo "***     PDU_OUTLETS : $PDU_OUTLETS"

    printVerbose "      device : '$OPTION_DEVICE'"
    printVerbose "      server : '$CONF_PDU_SERVER'"
    printVerbose "    standard : '$CONF_PDU_STANDARD'"
    printVerbose "   operation : '$PDU_OPERATION'"


    case "$CONF_PDU_STANDARD" in 
        apc)
            switch_apc
            ;;

        orvibo)
            switch_orvibo
            ;;

        tasmota)
            switch_tasmota
            ;;

        *)
            printError "The CONF_PDU_STANDARD is invalid in '$CONFIG_FILE_PATH'"
    esac

    sleep 0.5
done


