#! /bin/bash
MYNAME=$(basename $0)
MYDIR=$(dirname $0)
MYDIR=$(readlink -m "$MYDIR")
VERSION="0.0.4"
VERBOSE=""
LOGFILE=""
CONTAINER=""
SERVER=""
SSH="ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -o LogLevel=quiet"
STOP_OPTION=""

#
# Prints the software version and exits.
#
function printVersionAndExit()
{
    echo "$MYNAME Version $VERSION on $(hostname)" >&2
}

#
# $*: the error message
#
# Prints an error message to the standard error. The text will not mixed up with
# the data that is printed to the standard output.
#
function printError()
{
    local datestring=$(date "+%Y-%m-%d %H:%M:%S")

    echo -e "ERROR $*" >&2

    if [ "$LOGFILE" ]; then
        echo -e "$datestring ERROR $MYNAME($$) $*" >>"$LOGFILE"
    fi
}

#
# $*: the message
#
# Prints all the arguments but only if the program is in the verbose mode.
#
function printVerbose()
{
    local datestring=$(date "+%Y-%m-%d %H:%M:%S")

    if [ "$VERBOSE" == "true" ]; then
        echo -e "DEBUG $*" >&2
    fi

    if [ "$LOGFILE" ]; then
        echo -e "$datestring DEBUG $MYNAME($$) $*" >>"$LOGFILE"
    fi
}

function printHelpAndExit()
{
cat <<EOF
Usage:
  $MYNAME [OPTION]... [CONTAINER_NAME]...

  $MYNAME - Creates archives of containers.

 -h, --help             Print this help and exit.
 -v, --version          Print version information and exit.
 --verbose              Print more messages.
 --log-file=FILE        Store all the messages in the given file too.
 --server=SERVER        Create the container on remote server.
 --stop                 Stop containers that are running.

EOF
    exit 0
}

ARGS=$(\
    getopt \
        -o hvs:c:l \
        -l "help,verbose,version,log-file:,server:,stop" \
        -- "$@")

if [ $? -ne 0 ]; then
    exit 6
fi

eval set -- "$ARGS"
while true; do
    case "$1" in
        -h|--help)
            shift
            printHelpAndExit
            ;;

        --verbose)
            shift
            VERBOSE="true"
            VERBOSE_OPTION="--verbose"
            ;;

        -v|--version)
            shift
            VERSION_OPTION="--version"
            ;;

        --log-file)
            shift
            LOGFILE=$(readlink -m "$1")
            shift
            ;;

        --server)
            shift
            SERVER="$1"
            shift
            ;;

        --stop)
            shift
            STOP_OPTION="--stop"
            ;;

        --)
            shift
            break
            ;;

        *)
            break
            ;;
    esac
done

CONTAINER="$1"

#
# Checking the command line options.
#
if [ -z "$CONTAINER" ]; then
    printError "The first argument should be the name of the container."
    exit 6
fi

#
# Checking command line arguments.
#
EXTRA_OPTIONS=$*

#
# Checking root privileges.
#
if [ -z "$SERVER" ]; then
    if [ "$EUID" -ne 0 ]; then 
        printError "This script has to have root privileges."
        exit 5
    fi
fi

function get_container_names()
{
    local pattern="$1"
    local container

    cd /var/lib/lxc 
   
    for container in $pattern; do 
        if [ ! -d "$container" ]; then
            continue
        fi

        echo "$container"
    done

    return 0
}

function archive_one_container()
{
    local container="$1"
    local tar_file_name
    local old_tar_file_name
    local state
    local stopped

    state="$(lxc-ls -f | tail -n +2 | grep "^$container " | awk '{print $2}')"
    if [ "$state" == "RUNNING" ]; then
        if [ -z "$STOP_OPTION" ]; then
            printError "Container '$container' is running (no --stop provided)."
            retval=1
        else
            printVerbose "Stopping container '$container'."
            lxc-stop -n "$container"
            stopped=$?
        fi
    fi
        
    #
    # Archiving.
    #
    cd /var/lib/lxc

    printVerbose "Archiving container '$container'."
    tar_file_name="${container}-archive.tar"
    old_tar_file_name="${tar_file_name}.BAK"

    if [ -f "$tar_file_name" ]; then
        printVerbose "Renaming old archive file."
        mv "$tar_file_name" "$old_tar_file_name"
    fi
    
    if [ -f "$tar_file_name" ]; then
        printError "Failed to move '$tar_file_name' aside."
        return 1
    fi

    printVerbose "Archiving into '$tar_file_name'."
    tar --numeric-owner -czf "$tar_file_name" "$container"

    #
    # If we stopped it, we restart it.
    #
    if [ "$stopped" ]; then
        printVerbose "Starting container '$container'."
        lxc-start -n "$container"
    fi

    return 0
}

function check_one_container()
{
    local container="$1"
    local state
    local retval=0

    state="$(lxc-ls -f | tail -n +2 | grep "^$container " | awk '{print $2}')"

    if [ "$state" == "RUNNING" ]; then
        if [ -z "$STOP_OPTION" ]; then
            printError "Container '$container' is running (no --stop provided)."
            retval=1
        fi
    elif [ "$state" == "STOPPED" ]; then
        printVerbose "Container '$container' is not running."
    else
        printError "Container '$container' has unknown ($state) state."
        retval=1
    fi

    return $retval
}

function archive_all_containers()
{
    local pattern="$1"
    local container
    local retval=0

    for container in $(get_container_names $pattern); do
        if ! check_one_container "$container"; then
            retval=1
        fi
    done

    if [ $retval -ne 0 ]; then
        return $retval
    fi

    for container in $(get_container_names $pattern); do
        if ! archive_one_container "$container"; then
            retval=1
        fi
    done

    return $retval
}

#
# Doing the job.
#
if [ -z "$SERVER" ]; then
    if [ "$VERSION_OPTION" ]; then
        printVersionAndExit
        exit 0
    else
        archive_all_containers "$EXTRA_OPTIONS"
    fi
else
    #
    # We received the --server option and so we run the script on a remote
    # server.
    #
    printVerbose "Executing on server '$SERVER'."
    $SSH $SERVER -- \
        sudo $MYNAME \
            $VERSION_OPTION $VERBOSE_OPTION \
            $STOP_OPTION \
            "$EXTRA_OPTIONS"
fi

